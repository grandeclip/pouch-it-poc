import { getScreenshotsFromLibrary, ScreenshotAsset } from "@/services/media";
import { requestAllPermissions } from "@/services/permissions";
import {
  getParallelUploadEnabled,
  setParallelUploadEnabled as saveParallelUploadSetting,
} from "@/services/settings";
import { uploadScreenshots } from "@/services/upload";
import {
  clearUploadDB,
  getAllRecords,
  getNeedUploadFiles,
} from "@/services/uploadDB";
import { useEffect, useState } from "react";
import {
  ActivityIndicator,
  AppState,
  AppStateStatus,
  FlatList,
  SafeAreaView,
  StatusBar,
  StyleSheet,
  Switch,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

type UploadStatus =
  | "idle"
  | "requesting-permission"
  | "loading"
  | "uploading"
  | "completed"
  | "error";

interface UploadItem extends ScreenshotAsset {
  status: "pending" | "uploading" | "success" | "failed";
  error?: string;
}

export default function UploadScreen() {
  const [status, setStatus] = useState<UploadStatus>("idle");
  const [screenshots, setScreenshots] = useState<UploadItem[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [errorMessage, setErrorMessage] = useState<string>("");
  const [startTime, setStartTime] = useState<number>(0);
  const [elapsedTime, setElapsedTime] = useState<number>(0);
  const [autoUploadEnabled, setAutoUploadEnabled] = useState<boolean>(true);
  const [parallelUploadEnabled, setParallelUploadEnabled] =
    useState<boolean>(true);
  const [hasDBData, setHasDBData] = useState<boolean>(false);

  useEffect(() => {
    checkDBData();
    const loadedParallelSetting = loadSettings();

    // ÌÜµÌï© ÏóÖÎ°úÎìú ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
    import("@/services/unifiedUpload").then(({ registerPeriodicUpload }) => {
      registerPeriodicUpload();
    });

    if (autoUploadEnabled) {
      initializeUpload(loadedParallelSetting);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  function loadSettings(): boolean {
    const parallel = getParallelUploadEnabled();
    setParallelUploadEnabled(parallel);
    return parallel;
  }

  function checkDBData() {
    const records = getAllRecords();
    setHasDBData(records.length > 0);
  }
  useEffect(() => {
    let previousAppState = AppState.currentState;
    let backgroundLogInterval: ReturnType<typeof setInterval> | undefined;
    let backgroundCount = 0; // Î∞±Í∑∏ÎùºÏö¥Îìú Ïπ¥Ïö¥ÌÑ∞ (useEffect Ïä§ÏΩîÌîÑÎ°ú Ïù¥Îèô)

    const subscription = AppState.addEventListener(
      "change",
      (nextAppState: AppStateStatus) => {
        console.log(`[AppState] ${previousAppState} -> ${nextAppState}`);

        // Î∞±Í∑∏ÎùºÏö¥Îìú ÏßÑÏûÖ (inactiveÎäî Ï†úÏô∏, backgroundÎßå)
        if (nextAppState === "background") {
          console.log("üåô [Î∞±Í∑∏ÎùºÏö¥Îìú] ÏßÑÏûÖ - 1Ï¥àÎßàÎã§ Î°úÍ∑∏ ÏãúÏûë");

          // Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
          backgroundCount = 0;

          // 1Ï¥àÎßàÎã§ Î°úÍ∑∏ Ï∞çÍ∏∞
          backgroundLogInterval = setInterval(() => {
            backgroundCount++;
            const currentState = AppState.currentState;
            console.log(`üåô [Î∞±Í∑∏ÎùºÏö¥Îìú ÌôúÏÑ±] ${backgroundCount}Ï¥à Í≤ΩÍ≥º - AppState: ${currentState} - ÏóÖÎ°úÎìú: ${status}`);
          }, 1000);

          console.log("üåô [ÎîîÎ≤ÑÍ∑∏] setInterval Îì±Î°ù ÏôÑÎ£å");
        }

        // Ìè¨Í∑∏ÎùºÏö¥Îìú Î≥µÍ∑Ä (active ÏÉÅÌÉú)
        if (nextAppState === "active") {
          console.log("‚òÄÔ∏è [Ìè¨Í∑∏ÎùºÏö¥Îìú] Î≥µÍ∑Ä");

          // Î∞±Í∑∏ÎùºÏö¥Îìú Î°úÍ∑∏ Ï§ëÏßÄ
          if (backgroundLogInterval) {
            clearInterval(backgroundLogInterval);
            backgroundLogInterval = undefined;
            console.log(`üåô [Î∞±Í∑∏ÎùºÏö¥Îìú] Î°úÍ∑∏ Ï§ëÏßÄ - Ï¥ù ${backgroundCount}Ï¥à Í≤ΩÍ≥º`);
          }

          if (autoUploadEnabled && status !== "uploading") {
            console.log("[AppState] Ìè¨Í∑∏ÎùºÏö¥Îìú Î≥µÍ∑Ä - Ïä§Ï∫î ÏãúÏûë");
            initializeUpload();
          }
        }

        previousAppState = nextAppState;
      }
    );

    return () => {
      subscription.remove();
      if (backgroundLogInterval) {
        clearInterval(backgroundLogInterval);
      }
    };
  }, [autoUploadEnabled, status]);

  // ÏóÖÎ°úÎìú Ï§ëÏùº Îïå Í≤ΩÍ≥º ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    let interval: ReturnType<typeof setInterval> | undefined;
    if (status === "uploading" && startTime > 0) {
      interval = setInterval(() => {
        setElapsedTime(Date.now() - startTime);
      }, 100); // 0.1Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [status, startTime]);

  async function initializeUpload(parallelMode?: boolean) {
    try {
      // 1. Í∂åÌïú ÏöîÏ≤≠
      setStatus("requesting-permission");
      console.log("Í∂åÌïú ÏöîÏ≤≠ ÏãúÏûë...");
      const permissions = await requestAllPermissions();

      if (!permissions.camera || !permissions.mediaLibrary) {
        setStatus("error");
        setErrorMessage("Ïπ¥Î©îÎùº Î∞è ÏÇ¨ÏßÑ ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
        return;
      }

      // 2. Screenshots Ïä§Ï∫î
      setStatus("loading");
      console.log("Screenshots Ìè¥Îçî Ïä§Ï∫î Ï§ë...");
      const foundScreenshots = await getScreenshotsFromLibrary();

      if (foundScreenshots.length === 0) {
        setStatus("completed");
        setErrorMessage("ÏóÖÎ°úÎìúÌï† Ïä§ÌÅ¨Î¶∞ÏÉ∑Ïù¥ ÏóÜÏäµÎãàÎã§.");
        return;
      }

      // 3. DBÏóêÏÑú ÏóÖÎ°úÎìú ÌïÑÏöîÌïú ÌååÏùºÎßå ÌïÑÌÑ∞ÎßÅ
      console.log(`Ï¥ù ${foundScreenshots.length}Í∞ú Ïä§ÌÅ¨Î¶∞ÏÉ∑ Î∞úÍ≤¨`);
      const needUpload = getNeedUploadFiles(foundScreenshots);
      console.log(`ÏóÖÎ°úÎìú ÌïÑÏöî: ${needUpload.length}Í∞ú`);

      if (needUpload.length === 0) {
        setStatus("completed");
        setErrorMessage("Î™®Îì† Ïä§ÌÅ¨Î¶∞ÏÉ∑Ïù¥ Ïù¥ÎØ∏ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.");
        return;
      }

      // 4. ÏóÖÎ°úÎìú Ï§ÄÎπÑ
      const uploadItems: UploadItem[] = needUpload.map((screenshot) => ({
        ...screenshot,
        status: "pending",
      }));
      setScreenshots(uploadItems);

      // 5. ÏóÖÎ°úÎìú ÏãúÏûë
      setStatus("uploading");
      await startUpload(uploadItems, parallelMode);
    } catch (error) {
      setStatus("error");
      setErrorMessage("Ïï± Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      console.error("Ïï± Ï¥àÍ∏∞Ìôî Ïò§Î•ò:", error);
    }
  }

  async function startUpload(items: UploadItem[], parallelMode?: boolean) {
    setStartTime(Date.now());

    const filesToUpload = items.map((item) => ({
      id: item.id,
      uri: item.uri,
      filename: item.filename,
    }));

    const useParallel = parallelMode !== undefined ? parallelMode : parallelUploadEnabled;

    const result = await uploadScreenshots(
      filesToUpload,
      undefined,
      (current, total) => {
        setCurrentIndex(current);
        setScreenshots((prev) =>
          prev.map((item, index) => {
            if (index < current - 1) {
              return { ...item, status: "success" };
            } else if (index === current - 1) {
              return { ...item, status: "uploading" };
            }
            return item;
          })
        );
      },
      { parallel: useParallel }
    );

    // ÏµúÏ¢Ö ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setScreenshots((prev) =>
      prev.map((item, index) => ({
        ...item,
        status: result.results[index]?.success ? "success" : "failed",
        error: result.results[index]?.error,
      }))
    );

    setElapsedTime(result.elapsedTime);
    setStatus("completed");
    checkDBData();
  }

  function handleClearDB() {
    clearUploadDB();
    setHasDBData(false);
    setScreenshots([]);
    setStatus("idle");
  }

  function handleParallelUploadToggle(value: boolean) {
    setParallelUploadEnabled(value);
    saveParallelUploadSetting(value);
  }

  function renderStatusMessage() {
    switch (status) {
      case "requesting-permission":
        return (
          <View style={styles.statusContainer}>
            <ActivityIndicator size="large" color="#007AFF" />
            <Text style={styles.statusText}>Í∂åÌïú ÏöîÏ≤≠ Ï§ë...</Text>
          </View>
        );

      case "loading":
        return (
          <View style={styles.statusContainer}>
            <ActivityIndicator size="large" color="#007AFF" />
            <Text style={styles.statusText}>Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í≤ÄÏÉâ Ï§ë...</Text>
          </View>
        );

      case "uploading":
        const totalCount = screenshots.length;
        const successCount = screenshots.filter(
          (s) => s.status === "success"
        ).length;
        const progress =
          totalCount > 0 ? ((successCount / totalCount) * 100).toFixed(0) : 0;

        // Í≤ΩÍ≥º ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ
        const seconds = Math.floor(elapsedTime / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        const timeText =
          minutes > 0
            ? `${minutes}Î∂Ñ ${remainingSeconds}Ï¥à`
            : `${remainingSeconds}Ï¥à`;

        return (
          <View style={styles.headerContainer}>
            <Text style={styles.headerTitle}>ÏóÖÎ°úÎìú Ï§ë</Text>
            <Text style={styles.headerProgress}>
              {successCount} / {totalCount} ({progress}%)
            </Text>
            <Text style={styles.headerTime}>‚è±Ô∏è {timeText}</Text>
          </View>
        );

      case "completed":
        const successfulCount = screenshots.filter(
          (s) => s.status === "success"
        ).length;
        const failedCount = screenshots.filter(
          (s) => s.status === "failed"
        ).length;

        // Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ Í≥ÑÏÇ∞ (Î∞ÄÎ¶¨Ï¥à Ìè¨Ìï®)
        const totalMilliseconds = elapsedTime;
        const totalSeconds = Math.floor(totalMilliseconds / 1000);
        const totalMinutes = Math.floor(totalSeconds / 60);
        const totalRemainingSeconds = totalSeconds % 60;
        const milliseconds = totalMilliseconds % 1000;

        const totalTimeText =
          totalMinutes > 0
            ? `${totalMinutes}Î∂Ñ ${totalRemainingSeconds}.${milliseconds.toString().padStart(3, '0')}Ï¥à`
            : `${totalRemainingSeconds}.${milliseconds.toString().padStart(3, '0')}Ï¥à`;

        return (
          <View style={styles.headerContainer}>
            <Text style={styles.headerTitle}>ÏóÖÎ°úÎìú ÏôÑÎ£å</Text>
            <Text style={styles.headerSubtitle}>
              ÏÑ±Í≥µ: {successfulCount}Í∞ú{" "}
              {failedCount > 0 && `/ Ïã§Ìå®: ${failedCount}Í∞ú`}
            </Text>
            {elapsedTime > 0 && (
              <Text style={styles.headerTime}>
                ‚è±Ô∏è Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ: {totalTimeText}
              </Text>
            )}
          </View>
        );

      case "error":
        return (
          <View style={styles.errorContainer}>
            <Text style={styles.errorIcon}>‚ö†Ô∏è</Text>
            <Text style={styles.errorText}>{errorMessage}</Text>
          </View>
        );

      default:
        return null;
    }
  }

  function renderItem({ item }: { item: UploadItem }) {
    const getStatusIcon = () => {
      switch (item.status) {
        case "pending":
          return "‚è≥";
        case "uploading":
          return "üì§";
        case "success":
          return "‚úÖ";
        case "failed":
          return "‚ùå";
      }
    };

    const getStatusColor = () => {
      switch (item.status) {
        case "pending":
          return "#999";
        case "uploading":
          return "#007AFF";
        case "success":
          return "#34C759";
        case "failed":
          return "#FF3B30";
      }
    };

    return (
      <View style={styles.listItem}>
        <Text style={styles.statusIcon}>{getStatusIcon()}</Text>
        <View style={styles.itemContent}>
          <Text style={styles.filename} numberOfLines={1}>
            {item.filename}
          </Text>
          {item.error && <Text style={styles.errorDetail}>{item.error}</Text>}
        </View>
        {item.status === "uploading" && (
          <ActivityIndicator size="small" color={getStatusColor()} />
        )}
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />

      {/* ÏûêÎèô ÏóÖÎ°úÎìú ÌÜ†Í∏Ä */}
      <View style={styles.toggleContainer}>
        <View style={styles.toggleTextContainer}>
          <Text style={styles.toggleTitle}>ÏûêÎèô ÏóÖÎ°úÎìú</Text>
          <Text style={styles.toggleSubtitle}>
            Ïï± ÏãúÏûë Ïãú Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÏûêÎèô ÏóÖÎ°úÎìú
          </Text>
        </View>
        <Switch
          value={autoUploadEnabled}
          onValueChange={setAutoUploadEnabled}
          trackColor={{ false: "#E5E5EA", true: "#34C759" }}
          thumbColor={autoUploadEnabled ? "#FFF" : "#F4F3F4"}
          ios_backgroundColor="#E5E5EA"
        />
      </View>

      {/* Î≥ëÎ†¨ ÏóÖÎ°úÎìú ÌÜ†Í∏Ä */}
      <View style={styles.toggleContainer}>
        <View style={styles.toggleTextContainer}>
          <Text style={styles.toggleTitle}>Î≥ëÎ†¨ ÏóÖÎ°úÎìú</Text>
          <Text style={styles.toggleSubtitle}>
            {parallelUploadEnabled
              ? "Ïó¨Îü¨ Î∞∞ÏπòÎ•º ÎèôÏãúÏóê ÏóÖÎ°úÎìú (Îπ†Î¶Ñ)"
              : "Î∞∞ÏπòÎ•º ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÏóÖÎ°úÎìú (ÏïàÏ†ïÏ†Å, ÏßÅÎ†¨ Î∞©Ïãù)"}
          </Text>
        </View>
        <Switch
          value={parallelUploadEnabled}
          onValueChange={handleParallelUploadToggle}
          trackColor={{ false: "#E5E5EA", true: "#007AFF" }}
          thumbColor={parallelUploadEnabled ? "#FFF" : "#F4F3F4"}
          ios_backgroundColor="#E5E5EA"
        />
      </View>

      {/* DB Ï¥àÍ∏∞Ìôî Î≤ÑÌäº */}
      <View style={styles.clearButtonContainer}>
        <TouchableOpacity
          style={[styles.clearButton, !hasDBData && styles.clearButtonDisabled]}
          onPress={handleClearDB}
          disabled={!hasDBData}
        >
          <Text
            style={[
              styles.clearButtonText,
              !hasDBData && styles.clearButtonTextDisabled,
            ]}
          >
            üóëÔ∏è Î°úÏª¨ DB Ï¥àÍ∏∞Ìôî
          </Text>
        </TouchableOpacity>
        <Text style={styles.clearButtonHint}>
          {hasDBData
            ? "ÏóÖÎ°úÎìú Í∏∞Î°ùÏùÑ Î™®Îëê ÏÇ≠Ï†úÌï©ÎãàÎã§"
            : "Ï¥àÍ∏∞ÌôîÌï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§"}
        </Text>
      </View>

      {renderStatusMessage()}

      {screenshots.length > 0 && (
        <FlatList
          data={screenshots}
          renderItem={renderItem}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.listContent}
        />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F2F2F7",
  },
  toggleContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    backgroundColor: "#FFF",
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#E5E5EA",
  },
  toggleTextContainer: {
    flex: 1,
    marginRight: 12,
  },
  toggleTitle: {
    fontSize: 17,
    fontWeight: "600",
    color: "#000",
    marginBottom: 2,
  },
  toggleSubtitle: {
    fontSize: 13,
    color: "#666",
  },
  statusContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  statusText: {
    marginTop: 16,
    fontSize: 16,
    color: "#666",
  },
  headerContainer: {
    backgroundColor: "#FFF",
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#E5E5EA",
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#000",
    marginBottom: 4,
  },
  headerProgress: {
    fontSize: 16,
    color: "#007AFF",
    fontWeight: "600",
  },
  headerSubtitle: {
    fontSize: 16,
    color: "#666",
  },
  headerTime: {
    fontSize: 14,
    color: "#007AFF",
    fontWeight: "500",
    marginTop: 8,
  },
  errorContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 40,
  },
  errorIcon: {
    fontSize: 64,
    marginBottom: 16,
  },
  errorText: {
    fontSize: 18,
    color: "#FF3B30",
    textAlign: "center",
  },
  listContent: {
    padding: 16,
  },
  listItem: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFF",
    padding: 16,
    marginBottom: 8,
    borderRadius: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  statusIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  itemContent: {
    flex: 1,
  },
  filename: {
    fontSize: 14,
    color: "#000",
    fontWeight: "500",
  },
  errorDetail: {
    fontSize: 12,
    color: "#FF3B30",
    marginTop: 4,
  },
  clearButtonContainer: {
    backgroundColor: "#FFF",
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#E5E5EA",
  },
  clearButton: {
    backgroundColor: "#FF3B30",
    padding: 14,
    borderRadius: 12,
    alignItems: "center",
    justifyContent: "center",
  },
  clearButtonDisabled: {
    backgroundColor: "#E5E5EA",
  },
  clearButtonText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#FFF",
  },
  clearButtonTextDisabled: {
    color: "#C7C7CC",
  },
  clearButtonHint: {
    fontSize: 13,
    color: "#666",
    textAlign: "center",
    marginTop: 8,
  },
});
